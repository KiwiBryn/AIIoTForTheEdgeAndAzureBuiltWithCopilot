//---------------------------------------------------------------------------------
// Copyright (c) March 2025, devMobile Software
//
// https://www.gnu.org/licenses/#AGPL
//
//---------------------------------------------------------------------------------
// please write an azure function with an http trigger that uses yolosharp to estimate the pose of humans in an uploaded image.
// Yolo v8 pose estimation model and yolosharp library
// Make into azure function
// The image files are in the form of the request
// Modify the code so more than one image per request can be processed
// Initialise ILogger in the constructor
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Logging;

using Compunet.YoloSharp;

using SixLabors.ImageSharp.PixelFormats;
using SixLabors.ImageSharp;

public class PoseEstimationFunction
{
   private static ILogger _log;

   public PoseEstimationFunction(ILogger<PoseEstimationFunction> log)
   {
      _log = log;
   }

   //[FunctionName("PoseEstimation")]
   [Function("PoseEstimation")]
   public async Task<IActionResult> Run([HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req)
   {
      _log.LogInformation("Pose estimation function processed a request.");

      if (!req.HasFormContentType || !req.Form.Files.Any())
      {
         return new BadRequestObjectResult("Please upload image files.");
      }

      var results = new List<object>();

      foreach (var file in req.Form.Files)
      {
         using var memoryStream = new MemoryStream();
         await file.CopyToAsync(memoryStream);
         memoryStream.Position = 0;

         using var image = Image.Load<Rgba32>(memoryStream);

         // Initialize the YOLO model
         //using var predictor = new YoloPredictor("path/to/model.onnx");
         using var predictor = new YoloPredictor("yolov8s-pose.onnx");

         // Perform pose estimation
         var result = await predictor.PoseAsync(image);

         // Format the results
         //var poses = result.Poses.Select(pose => new
         var poses = result.Select(pose => new
         {
            //Keypoints = pose.Keypoints.Select(k => new { k.X, k.Y }),
            Keypoints = pose.Select(k => new { k.Point.X, k.Point.Y }),
            Confidence = pose.Confidence
         });

         results.Add(new
         {
            Image = file.FileName,
            Poses = poses
         });
      }

      return new OkObjectResult(new { results });
   }
}


/*
 Initial code generated by Visual Stduio Plugin
 namespace YoloSharpPoseEstimationHttpTriggerFunction
{
    public class Function1
    {
        private readonly ILogger<Function1> _logger;

        public Function1(ILogger<Function1> logger)
        {
            _logger = logger;
        }

        [Function("Function1")]
        public IActionResult Run([HttpTrigger(AuthorizationLevel.Function, "get", "post")] HttpRequest req)
        {
            _logger.LogInformation("C# HTTP trigger function processed a request.");
            return new OkObjectResult("Welcome to Azure Functions!");
        }
    }
}
*/
/*
Copilot code suggestion: not certain why it did yoloV3, but surprisingly good.

using System.IO;
using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using YOLOSharp;
using YOLOSharp.Models;

public static class PoseEstimationFunction
{
    [FunctionName("PoseEstimation")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        log.LogInformation("Processing an image for pose estimation.");

        // Read the uploaded image
        var formFile = req.Form.Files["image"];
        if (formFile == null)
        {
            return new BadRequestObjectResult("Please upload an image.");
        }

        using (var stream = new MemoryStream())
        {
            await formFile.CopyToAsync(stream);
            var imageBytes = stream.ToArray();

            // Load YOLO model
            var yolo = new Yolo("yolov3-pose.onnx");

            // Perform pose estimation
            var poses = yolo.EstimatePose(imageBytes);

            // Return the results
            return new OkObjectResult(poses);
        }
    }
}
*/